{"version":3,"sources":["app.js","controller/contactCtrl.js","controller/dataCtrl.js","controller/mainCtrl.js","controller/usersCtrl.js","service/contactSrv.js","service/dataSrv.js","service/mainSrv.js","service/usersSrv.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","when","state","url","templateUrl","controller","$scope","$http","$timeout","$interval","uiGridConstants","uiGridGroupingConstants","dataSrv","gridApi","selectedArray","console","log","gridOptions","enableCellEditOnFocus","enableColumnResizing","enableFiltering","enableGridMenu","infiniteScrollRowsFromEnd","infiniteScrollUp","infiniteScrollDown","enableRowSelection","multiSelect","expandableRowTemplate","expandableRowHeight","onRegisterApi","selection","on","rowSelectionChanged","row","isSelected","entity","id","edit","afterCellEdit","rowEntity","colDef","newValue","oldValue","changePatient","test","document","getElementsByClassName","receivePatients","getPatients","then","response","data","i","length","receiveVisits","getVisits","subGridOptions","addPatient","addNewPatient","addVisit","addNewVisit","removePatient","toggleFilterRow","core","notifyDataChange","dataChange","COLUMN","mainSrv","weather","service","method","changeVisit","visit_id","removeVisit","getWeather","weatherZipCode","weatherAPI","res"],"mappings":";;AAAAA,QAAQC,MAAR,CAAe,KAAf,EAAsB,CAAC,WAAD,EAAc,SAAd,EAAyB,SAAzB,EAAoC,iBAApC,EAAuD,cAAvD,EAAuE,uBAAvE,EAAgG,iBAAhG,EAAmH,mBAAnH,EAAwI,qBAAxI,EAA+J,kBAA/J,EAAmL,kBAAnL,EAAuM,kBAAvM,EAA2N,wBAA3N,EAAqP,oBAArP,CAAtB,EACKC,MADL,CACY,UAASC,cAAT,EAAyBC,kBAAzB,EAA6C;AACjDA,uBAAmBC,IAAnB,CAAwB,EAAxB,EAA4B,GAA5B;;AAEAF,mBACKG,KADL,CACW,MADX,EACmB;AACXC,aAAK,GADM;AAEXC,qBAAa;AAFF,KADnB,EAKKF,KALL,CAKW,OALX,EAKoB;AACZC,aAAK,QADO;AAEZC,qBAAa;AAFD,KALpB,EASKF,KATL,CASW,SATX,EASsB;AACdC,aAAK,UADS;AAEdC,qBAAa;AAFC,KATtB,EAaKF,KAbL,CAaW,MAbX,EAamB;AACXC,aAAK,OADM;AAEXC,qBAAa,mBAFF;AAGXC,oBAAY;AAHD,KAbnB,EAkBKH,KAlBL,CAkBW,UAlBX,EAkBuB;AACfC,aAAK,UADU;AAEfC,qBAAa;AAFE,KAlBvB;AAsBH,CA1BL;ACAA;;;ACAAR,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,UAAjC,EAA6C,UAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,eAA7C,EAA8DC,uBAA9D,EAAuFC,OAAvF,EAAgG;;AAEzI,QAAIC,OAAJ;;AAEAP,WAAOQ,aAAP,GAAuB,EAAvB;AACAC,YAAQC,GAAR,CAAYV,OAAOQ,aAAnB;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJR,WAAOW,WAAP,GAAqB;AACjBC,+BAAuB,IADN;AAEjBC,8BAAsB,IAFL;AAGjBC,yBAAiB,IAHA;AAIjBC,wBAAgB,IAJC;AAKjBC,mCAA2B,EALV;AAMjBC,0BAAkB,IAND;AAOjBC,4BAAoB,IAPH;AAQjBC,4BAAoB,IARH;AASjBC,qBAAa,KATI;AAUjBC,+BAAuB,4BAVN;AAWjBC,6BAAqB,GAXJ;AAYjBC,uBAAe,uBAAShB,OAAT,EAAkB;AAC7BA,sBAAUA,OAAV;AACAA,oBAAQiB,SAAR,CAAkBC,EAAlB,CAAqBC,mBAArB,CAAyC1B,MAAzC,EAAiD,UAAS2B,GAAT,EAAc;AAC3DlB,wBAAQC,GAAR,CAAY,UAAZ,EAAwBiB,GAAxB;AACA,oBAAIA,IAAIC,UAAR,EAAoB;AAChB5B,2BAAOQ,aAAP,GAAuB,CAACmB,IAAIE,MAAJ,CAAWC,EAAZ,CAAvB;AACH;AACJ,aALD;AAMAvB,oBAAQwB,IAAR,CAAaN,EAAb,CAAgBO,aAAhB,CAA8BhC,MAA9B,EAAsC,UAASiC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAClF3B,wBAAQC,GAAR,CAAYuB,SAAZ,EAAuB,KAAvB;AACAxB,wBAAQC,GAAR,CAAYwB,MAAZ,EAAoB,MAApB;AACAzB,wBAAQC,GAAR,CAAYyB,QAAZ,EAAsB,MAAtB;AACA1B,wBAAQC,GAAR,CAAY0B,QAAZ,EAAsB,IAAtB;AACA9B,wBAAQ+B,aAAR,CAAsBJ,SAAtB;AACH,aAND;AAOH;;AA3BgB,KAArB;;AA+BAjC,WAAOsC,IAAP,GAAc,YAAM;AAChB7B,gBAAQC,GAAR,CAAY6B,SAASC,sBAAT,CAAgC,sBAAhC,CAAZ;AACH,KAFD;;AAIAxC,WAAOyC,eAAP,GAAyB,YAAM;AAC3BnC,gBAAQoC,WAAR,GAAsBC,IAAtB,CAA2B,UAACC,QAAD,EAAc;AACrC5C,mBAAOW,WAAP,CAAmBkC,IAAnB,GAA0BD,SAASC,IAAnC;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAASC,IAAT,CAAcE,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3C9C,uBAAOgD,aAAP,CAAqBJ,SAASC,IAAT,CAAcC,CAAd,EAAiBhB,EAAtC,EAA0CgB,CAA1C;AACH;AACJ,SALD;AAMH,KAPD;AAQA9C,WAAOyC,eAAP;;AAEAzC,WAAOgD,aAAP,GAAuB,UAAClB,EAAD,EAAKgB,CAAL,EAAW;AAC9BxC,gBAAQ2C,SAAR,CAAkBnB,EAAlB,EAAsBa,IAAtB,CAA2B,UAACC,QAAD,EAAc;AACrC;AACA;AACA;AACA5C,mBAAOW,WAAP,CAAmBkC,IAAnB,CAAwBC,CAAxB,EAA2BI,cAA3B,GAA4C;AACxCL,sBAAMD,SAASC;AADyB,aAA5C;AAGH,SAPD;AAQH,KATD;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7C,WAAOmD,UAAP,GAAoB,YAAM;AACtB7C,gBAAQ8C,aAAR,GAAwBT,IAAxB,CAA6B,UAACC,QAAD,EAAc,CAAE,CAA7C;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAKAzC,WAAOqD,QAAP,GAAkB,UAACvB,EAAD,EAAQ;AACtBxB,gBAAQgD,WAAR,CAAoBxB,GAAG,CAAH,CAApB,EAA2Ba,IAA3B,CAAgC,UAACC,QAAD,EAAc,CAAE,CAAhD;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAMAzC,WAAOuD,aAAP,GAAuB,UAACzB,EAAD,EAAQ;AAC3BxB,gBAAQiD,aAAR,CAAsBzB,GAAG,CAAH,CAAtB,EAA6Ba,IAA7B,CAAkC,UAACC,QAAD,EAAc,CAAE,CAAlD;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAQAzC,WAAOwD,eAAP,GAAyB,YAAW;AAChCxD,eAAOW,WAAP,CAAmBG,eAAnB,GAAqC,CAACd,OAAOW,WAAP,CAAmBG,eAAzD;AACAP,gBAAQkD,IAAR,CAAaC,gBAAb,CAA8BtD,gBAAgBuD,UAAhB,CAA2BC,MAAzD;AACH,KAHD;AAOH,CAtHD;;;ACAAtE,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,UAAjC,EAA6C,UAASC,MAAT,EAAiB6D,OAAjB,EAA0B;AACnE7D,WAAO8D,OAAP,GAAiBD,QAAQC,OAAzB;AACH,CAFD;ACAA;ACAA;;;ACAAxE,QAAQC,MAAR,CAAe,KAAf,EAAsBwE,OAAtB,CAA8B,SAA9B,EAAyC,UAAS9D,KAAT,EAAgB;;AAErD,SAAKyC,WAAL,GAAmB,YAAM;AACjB,eAAOzC,MAAM;AACTJ,iBAAK,kBADI;AAETmE,oBAAQ;AAFC,SAAN,CAAP;AAIH,KALL,EAMI,KAAKf,SAAL,GAAiB,UAACnB,EAAD,EAAQ;AACrB,eAAO7B,MAAM;AACTJ,qCAAuBiC,EADd;AAETkC,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAXL,EAYI,KAAKZ,aAAL,GAAqB,YAAM;AACvB,eAAOnD,MAAM;AACTJ,iBAAK,oBADI;AAETmE,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAjBL,EAkBI,KAAKV,WAAL,GAAmB,UAACxB,EAAD,EAAQ;AACvB,eAAO7B,MAAM;AACTJ,uCAAyBiC,EADhB;AAETkC,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAvBL,EAwBI,KAAK3B,aAAL,GAAqB,UAACJ,SAAD,EAAe;AAChC,eAAOhC,MAAM;AACTJ,qCADS;AAETmE,oBAAQ,KAFC;AAGTnB,kBAAMZ;AAHG,SAAN,CAAP;AAKH,KA9BL,EA+BI,KAAKgC,WAAL,GAAmB,UAACC,QAAD,EAAc;AAC7B,eAAOjE,MAAM;AACTJ,uCAAyBqE,QADhB;AAETF,oBAAQ;AAFC,SAAN,CAAP;AAIH,KApCL,EAqCI,KAAKT,aAAL,GAAqB,UAACzB,EAAD,EAAQ;AACzB,eAAO7B,MAAM;AACTJ,wCAA0BiC,EADjB;AAETkC,oBAAQ;AAFC,SAAN,CAAP;AAIH,KA1CL,EA2CI,KAAKG,WAAL,GAAmB,UAACD,QAAD,EAAc;AAC7B,eAAOjE,MAAM;AACTJ,sCAAwBqE,QADf;AAETF,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAhDL;AAiDH,CAnDD;;;ACAA1E,QAAQC,MAAR,CAAe,KAAf,EAAsBwE,OAAtB,CAA8B,SAA9B,EAAyC,UAAS9D,KAAT,EAAgB;AAAA;;AACrD,QAAImE,aAAa,SAAbA,UAAa,GAAM;AACnB,eAAOnE,MAAM;AACT+D,oBAAQ,KADC;AAETnE,kEAAoDL,OAAO6E,cAA3D,kBAAsF7E,OAAO8E;AAFpF,SAAN,EAGJ3B,IAHI,CAGC,UAAC4B,GAAD,EAAS;AACb,kBAAKT,OAAL,GAAeS,IAAI1B,IAAnB;AACH,SALM,CAAP;AAMH,KAPD;AAQH,CATD;ACAA","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ngTouch', 'ui.grid', 'ui.grid.cellNav', 'ui.grid.edit', 'ui.grid.resizeColumns', 'ui.grid.pinning', 'ui.grid.selection', 'ui.grid.moveColumns', 'ui.grid.exporter', 'ui.grid.importer', 'ui.grid.grouping', 'ui.grid.infiniteScroll', 'ui.grid.expandable'])\n    .config(function($stateProvider, $urlRouterProvider) {\n        $urlRouterProvider.when('', '/');\n\n        $stateProvider\n            .state('home', {\n                url: '/',\n                templateUrl: './views/home.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: './views/users.html'\n            })\n            .state('patient', {\n                url: '/patient',\n                templateUrl: './views/addPatient.html'\n            })\n            .state('data', {\n                url: '/data',\n                templateUrl: './views/data.html',\n                controller: 'dataCtrl'\n            })\n            .state('location', {\n                url: 'location',\n                templateUrl: './views/location.html'\n            })\n    })","","angular.module('app').controller('dataCtrl', function($scope, $http, $timeout, $interval, uiGridConstants, uiGridGroupingConstants, dataSrv) {\n\n    var gridApi;\n\n    $scope.selectedArray = []\n    console.log($scope.selectedArray)\n        // $scope.row.entity.subGridOptions = {\n        //     enableCellEditOnFocus: true,\n        //     enableColumnResizing: true,\n        //     enableFiltering: true,\n        //     enableGridMenu: true,\n        //     infiniteScrollRowsFromEnd: 25,\n        //     infiniteScrollUp: true,\n        //     infiniteScrollDown: true,\n        //     enableRowSelection: true,\n        //     multiSelect: false,\n        //     onRegisterApi: function(gridApi) {\n        //         let subgridApi = gridApi;\n        //         subgridApi.selection.on.rowSelectionChanged($scope, function(row) {\n        //             console.log(\"inner: \", row)\n        //             if (row.isSelected) {\n        //                 $scope.selectedArray = [row.entity.id]\n        //             }\n        //         })\n        //     }\n        // }\n\n    $scope.gridOptions = {\n        enableCellEditOnFocus: true,\n        enableColumnResizing: true,\n        enableFiltering: true,\n        enableGridMenu: true,\n        infiniteScrollRowsFromEnd: 25,\n        infiniteScrollUp: true,\n        infiniteScrollDown: true,\n        enableRowSelection: true,\n        multiSelect: false,\n        expandableRowTemplate: './views/expandableRow.html',\n        expandableRowHeight: 150,\n        onRegisterApi: function(gridApi) {\n            gridApi = gridApi;\n            gridApi.selection.on.rowSelectionChanged($scope, function(row) {\n                console.log(\"outter: \", row)\n                if (row.isSelected) {\n                    $scope.selectedArray = [row.entity.id]\n                }\n            })\n            gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {\n                console.log(rowEntity, 'row')\n                console.log(colDef, 'your')\n                console.log(newValue, 'boat')\n                console.log(oldValue, 'ok')\n                dataSrv.changePatient(rowEntity);\n            })\n        }\n\n    };\n\n    $scope.test = () => {\n        console.log(document.getElementsByClassName('ui-grid-row-selected'))\n    }\n\n    $scope.receivePatients = () => {\n        dataSrv.getPatients().then((response) => {\n            $scope.gridOptions.data = response.data;\n            for (var i = 0; i < response.data.length; i++) {\n                $scope.receiveVisits(response.data[i].id, i)\n            }\n        })\n    }\n    $scope.receivePatients();\n\n    $scope.receiveVisits = (id, i) => {\n        dataSrv.getVisits(id).then((response) => {\n            // response.data.map(e => {\n            //     e['delete?'] = 'x'\n            // })\n            $scope.gridOptions.data[i].subGridOptions = {\n                data: response.data\n            };\n        })\n    };\n\n    // const deleteCell = document.getElementsByClassName('ui-grid-coluiGrid-0093');\n    // const deleteVisitFn = () => {\n    //     alert('This works')\n    // }\n    // console.log(deleteCell)\n    // deleteCell.map(e => {\n    //     e.addEventListener('click', deleteVisitFn)\n    // })\n\n    $scope.addPatient = () => {\n        dataSrv.addNewPatient().then((response) => {})\n        $scope.receivePatients();\n    };\n\n    $scope.addVisit = (id) => {\n        dataSrv.addNewVisit(id[0]).then((response) => {})\n        $scope.receivePatients();\n    };\n\n\n    $scope.removePatient = (id) => {\n        dataSrv.removePatient(id[0]).then((response) => {})\n        $scope.receivePatients();\n    };\n\n\n\n\n    $scope.toggleFilterRow = function() {\n        $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;\n        gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);\n    };\n\n\n\n});","angular.module('app').controller('mainCtrl', function($scope, mainSrv) {\n    $scope.weather = mainSrv.weather\n})","","","angular.module('app').service('dataSrv', function($http) {\n\n    this.getPatients = () => {\n            return $http({\n                url: '/api/getPatients',\n                method: 'GET'\n            })\n        },\n        this.getVisits = (id) => {\n            return $http({\n                url: `/api/getVisits/${id}`,\n                method: 'GET'\n            })\n        },\n        this.addNewPatient = () => {\n            return $http({\n                url: '/api/addNewPatient',\n                method: 'POST'\n            })\n        },\n        this.addNewVisit = (id) => {\n            return $http({\n                url: `/api/addNewVisit/${id}`,\n                method: 'POST'\n            })\n        },\n        this.changePatient = (rowEntity) => {\n            return $http({\n                url: `/api/updatePatient`,\n                method: 'PUT',\n                data: rowEntity\n            })\n        },\n        this.changeVisit = (visit_id) => {\n            return $http({\n                url: `/api/updateVisit/${visit_id}`,\n                method: 'PUT'\n            })\n        },\n        this.removePatient = (id) => {\n            return $http({\n                url: `api/deletePatient/${id}`,\n                method: 'DELETE'\n            })\n        },\n        this.removeVisit = (visit_id) => {\n            return $http({\n                url: `api/deleteVisit/${visit_id}`,\n                method: 'DELETE'\n            })\n        }\n})","angular.module('app').service('mainSrv', function($http) {\n    let getWeather = () => {\n        return $http({\n            method: 'get',\n            url: `api.openweathermap.org/data/2.5/weather?zip=${config.weatherZipCode},us&APPID=${config.weatherAPI}`\n        }).then((res) => {\n            this.weather = res.data;\n        })\n    };\n})",""]}