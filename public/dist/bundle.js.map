{"version":3,"sources":["app.js","controller/contactCtrl.js","controller/dataCtrl.js","controller/mainCtrl.js","controller/usersCtrl.js","service/contactSrv.js","service/dataSrv.js","service/mainSrv.js","service/usersSrv.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","when","state","url","templateUrl","controller","$scope","$http","$timeout","$interval","uiGridConstants","uiGridGroupingConstants","dataSrv","$window","gridApi","selectedArray","console","log","gridOptions","enableCellEditOnFocus","enableColumnResizing","enableFiltering","enableGridMenu","infiniteScrollRowsFromEnd","infiniteScrollUp","infiniteScrollDown","enableRowSelection","multiSelect","expandableRowTemplate","expandableRowHeight","expandableRowScope","subGridVariable","onRegisterApi","selection","on","rowSelectionChanged","row","isSelected","entity","id","edit","afterCellEdit","rowEntity","colDef","newValue","oldValue","changePatient","receivePatients","getPatients","then","response","data","i","length","receiveVisits","test","alert","document","getElementsByClassName","subGridScope","clickMeSub","getVisits","subGridOptions","appScopeProvider","columnDefs","name","cellTemplate","addPatient","addNewPatient","addVisit","addNewVisit","removePatient","toggleFilterRow","core","notifyDataChange","dataChange","COLUMN","mainSrv","weather","usersSrv","$state","addUser","user","addNewUser","go","changePassword","updatePassword","changeUsername","updateUsername","selectArray","receiveUsers","getUsers","removeUser","service","method","changeVisit","removeVisit","visit_id","getWeather","weatherZipCode","weatherAPI","res"],"mappings":";;AAAAA,QAAQC,MAAR,CAAe,KAAf,EAAsB,CAAC,WAAD,EAAc,SAAd,EAAyB,SAAzB,EAAoC,iBAApC,EAAuD,cAAvD,EAAuE,uBAAvE,EAAgG,iBAAhG,EAAmH,mBAAnH,EAAwI,qBAAxI,EAA+J,kBAA/J,EAAmL,kBAAnL,EAAuM,kBAAvM,EAA2N,wBAA3N,EAAqP,oBAArP,CAAtB,EACKC,MADL,CACY,UAASC,cAAT,EAAyBC,kBAAzB,EAA6C;AACjDA,uBAAmBC,IAAnB,CAAwB,EAAxB,EAA4B,GAA5B;;AAEAF,mBACKG,KADL,CACW,MADX,EACmB;AACXC,aAAK,GADM;AAEXC,qBAAa;AAFF,KADnB,EAKKF,KALL,CAKW,OALX,EAKoB;AACZC,aAAK,QADO;AAEZC,qBAAa,oBAFD;AAGZC,oBAAY;AAHA,KALpB,EAUKH,KAVL,CAUW,MAVX,EAUmB;AACXC,aAAK,OADM;AAEXC,qBAAa,mBAFF;AAGXC,oBAAY;AAHD,KAVnB,EAeKH,KAfL,CAeW,UAfX,EAeuB;AACfC,aAAK,WADU;AAEfC,qBAAa;AAFE,KAfvB,EAmBKF,KAnBL,CAmBW,UAnBX,EAmBuB;AACfC,aAAK,WADU;AAEfC,qBAAa,uBAFE;AAGfC,oBAAY;AAHG,KAnBvB,EAwBKH,KAxBL,CAwBW,OAxBX,EAwBoB;AACZC,aAAK,QADO;AAEZC,qBAAa;AAFD,KAxBpB,EA4BKF,KA5BL,CA4BW,iBA5BX,EA4B8B;AACtBC,aAAK,kBADiB;AAEtBC,qBAAa,6BAFS;AAGtBC,oBAAY;AAHU,KA5B9B,EAiCKH,KAjCL,CAiCW,iBAjCX,EAiC8B;AACtBC,aAAK,kBADiB;AAEtBC,qBAAa,6BAFS;AAGtBC,oBAAY;AAHU,KAjC9B;AAsCH,CA1CL;ACAA;;;ACAAT,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,UAAjC,EAA6C,UAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,eAA7C,EAA8DC,uBAA9D,EAAuFC,OAAvF,EAAgGC,OAAhG,EAAyG;;AAElJ,QAAIC,OAAJ;;AAEAR,WAAOS,aAAP,GAAuB,EAAvB;AACI;AACJC,YAAQC,GAAR,CAAYX,OAAOS,aAAnB;;AAEA;AACA;AACA;AACA;;;AAGAT,WAAOY,WAAP,GAAqB;AACjBC,+BAAuB,IADN;AAEjBC,8BAAsB,IAFL;AAGjBC,yBAAiB,IAHA;AAIjBC,wBAAgB,IAJC;AAKjBC,mCAA2B,EALV;AAMjBC,0BAAkB,IAND;AAOjBC,4BAAoB,IAPH;AAQjBC,4BAAoB,IARH;AASjBC,qBAAa,KATI;AAUjBC,+BAAuB,4BAVN;AAWjBC,6BAAqB,GAXJ;AAYjBC,4BAAoB;AAChBC,6BAAiB;AADD,SAZH;AAejBC,uBAAe,uBAASlB,OAAT,EAAkB;AAC7B;AACAA,sBAAUA,OAAV;;AAEAA,oBAAQmB,SAAR,CAAkBC,EAAlB,CAAqBC,mBAArB,CAAyC7B,MAAzC,EAAiD,UAAS8B,GAAT,EAAc;AAC3D;AACA,oBAAIA,IAAIC,UAAR,EAAoB;AAChB/B,2BAAOS,aAAP,GAAuB,CAACqB,IAAIE,MAAJ,CAAWC,EAAZ,CAAvB;AACH;AACJ,aALD;;AAOAzB,oBAAQ0B,IAAR,CAAaN,EAAb,CAAgBO,aAAhB,CAA8BnC,MAA9B,EAAsC,UAASoC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAClF7B,wBAAQC,GAAR,CAAYyB,SAAZ,EAAuB,KAAvB;AACA1B,wBAAQC,GAAR,CAAY0B,MAAZ,EAAoB,MAApB;AACA3B,wBAAQC,GAAR,CAAY2B,QAAZ,EAAsB,MAAtB;AACA5B,wBAAQC,GAAR,CAAY4B,QAAZ,EAAsB,IAAtB;AACAjC,wBAAQkC,aAAR,CAAsBJ,SAAtB;AACH,aAND;;AAQApC,mBAAOyC,eAAP,GAAyB,YAAM;AAC3BnC,wBAAQoC,WAAR,GAAsBC,IAAtB,CAA2B,UAACC,QAAD,EAAc;AACrC5C,2BAAOY,WAAP,CAAmBiC,IAAnB,GAA0BD,SAASC,IAAnC;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAASC,IAAT,CAAcE,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3C9C,+BAAOgD,aAAP,CAAqBJ,SAASC,IAAT,CAAcC,CAAd,EAAiBb,EAAtC,EAA0Ca,CAA1C;AACH;AACJ,iBALD;AAMH,aAPD;AAQA9C,mBAAOyC,eAAP;AACAzC,mBAAOiD,IAAP,GAAc,YAAM;AAChBC,sBAAM,KAAN;AACAxC,wBAAQC,GAAR,CAAYwC,SAASC,sBAAT,CAAgC,wCAAhC,CAAZ;AACH,aAHD;;AAKApD,mBAAOqD,YAAP,GAAsB;AAClBC,4BAAY,sBAAW;AACnB;AACA5C,4BAAQC,GAAR,CAAY,IAAZ;AACI;AACP;AALiB,aAAtB;;AAQAX,mBAAOgD,aAAP,GAAuB,UAACf,EAAD,EAAKa,CAAL,EAAW;AAC9BxC,wBAAQiD,SAAR,CAAkBtB,EAAlB,EAAsBU,IAAtB,CAA2B,UAACC,QAAD,EAAc;AACrC;AACA;AACA;;AAEA5C,2BAAOY,WAAP,CAAmBiC,IAAnB,CAAwBC,CAAxB,EAA2BU,cAA3B,GAA4C;AACxCC,0CAAkBzD,OAAOqD,YADe;AAExCK,oCAAY,CACR,EAAEC,MAAM,IAAR,EAAcC,mGAAd,EADQ,EAGR,EAAED,MAAM,UAAR,EAHQ,EAIR,EAAEA,MAAM,MAAR,EAJQ,EAKR,EAAEA,MAAM,WAAR,EALQ,EAMR,EAAEA,MAAM,QAAR,EANQ,EAOR,EAAEA,MAAM,cAAR,EAPQ,EAQR,EAAEA,MAAM,UAAR,EARQ,EASR,EAAEA,MAAM,OAAR,EATQ,CAF4B;AAaxCd,8BAAMD,SAASC;AAbyB,qBAA5C;AAeH,iBApBD;AAqBH,aAtBD;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;AA7GgB,KAArB;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7C,WAAO6D,UAAP,GAAoB,YAAM;AACtBvD,gBAAQwD,aAAR,GAAwBnB,IAAxB,CAA6B,UAACC,QAAD,EAAc,CAAE,CAA7C;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAKAzC,WAAO+D,QAAP,GAAkB,UAAC9B,EAAD,EAAQ;AACtB3B,gBAAQ0D,WAAR,CAAoB/B,GAAG,CAAH,CAApB,EAA2BU,IAA3B,CAAgC,UAACC,QAAD,EAAc,CAAE,CAAhD;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAMAzC,WAAOiE,aAAP,GAAuB,UAAChC,EAAD,EAAQ;AAC3B3B,gBAAQ2D,aAAR,CAAsBhC,GAAG,CAAH,CAAtB,EAA6BU,IAA7B,CAAkC,UAACC,QAAD,EAAc,CAAE,CAAlD;AACA5C,eAAOyC,eAAP;AACH,KAHD;;AAQAzC,WAAOkE,eAAP,GAAyB,YAAW;AAChClE,eAAOY,WAAP,CAAmBG,eAAnB,GAAqC,CAACf,OAAOY,WAAP,CAAmBG,eAAzD;AACAP,gBAAQ2D,IAAR,CAAaC,gBAAb,CAA8BhE,gBAAgBiE,UAAhB,CAA2BC,MAAzD;AACH,KAHD;AAOH,CA3LD;;;ACAAhF,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,UAAjC,EAA6C,UAASC,MAAT,EAAiBuE,OAAjB,EAA0B;AACnEvE,WAAOwE,OAAP,GAAiBD,QAAQC,OAAzB;AACH,CAFD;;;ACAAlF,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,WAAjC,EAA8C,UAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,eAA7C,EAA8DC,uBAA9D,EAAuFoE,QAAvF,EAAiGC,MAAjG,EAAyG;;AAGnJ1E,WAAO2E,OAAP,GAAiB,UAACC,IAAD,EAAU;AACvBH,iBAASI,UAAT,CAAoBD,IAApB,EAA0BjC,IAA1B,CAA+B,UAACC,QAAD,EAAc;AACzC,gBAAIA,SAASC,IAAT,GAAgB,EAApB,EAAwB;AACpB6B,uBAAOI,EAAP,CAAU,MAAV;AACH,aAFD,MAEO;AACH5B,sBAAM,YAAN;AACH;AACJ,SAND;AAQH,KATD;;AAWAlD,WAAO+E,cAAP,GAAwB,UAACH,IAAD,EAAU;AAC9BH,iBAASO,cAAT,CAAwBJ,IAAxB,EAA8BjC,IAA9B,CAAmC,UAACC,QAAD,EAAc;AAC7C,gBAAIA,SAASC,IAAT,GAAgB,EAApB,EAAwB;AACpB6B,uBAAOI,EAAP,CAAU,MAAV;AACH,aAFD,MAEO;AACH5B,sBAAM,YAAN;AACH;AACJ,SAND;AAOH,KARD;;AAUAlD,WAAOiF,cAAP,GAAwB,UAACL,IAAD,EAAU;AAC9BH,iBAASS,cAAT,CAAwBN,IAAxB,EAA8BjC,IAA9B,CAAmC,UAACC,QAAD,EAAc;AAC7C,gBAAIA,SAASC,IAAT,GAAgB,EAApB,EAAwB;AACpB6B,uBAAOI,EAAP,CAAU,MAAV;AACH,aAFD,MAEO;AACH5B,sBAAM,YAAN;AACH;AACJ,SAND;AAOH,KARD;;AAWA,QAAI1C,OAAJ;;AAEAR,WAAOmF,WAAP,GAAqB,EAArB;AACAzE,YAAQC,GAAR,CAAY,SAAZ,EAAuBX,OAAOmF,WAA9B;;AAEAnF,WAAOY,WAAP,GAAqB;AACjBC,+BAAuB,IADN;AAEjBC,8BAAsB,IAFL;AAGjBC,yBAAiB,IAHA;AAIjBC,wBAAgB,IAJC;AAKjBC,mCAA2B,EALV;AAMjBC,0BAAkB,IAND;AAOjBC,4BAAoB,IAPH;AAQjBC,4BAAoB,IARH;AASjBC,qBAAa,KATI;AAUjBK,uBAAe,uBAASlB,OAAT,EAAkB;AAC7BA,sBAAUA,OAAV;;AAEAA,oBAAQmB,SAAR,CAAkBC,EAAlB,CAAqBC,mBAArB,CAAyC7B,MAAzC,EAAiD,UAAS8B,GAAT,EAAc;AAC3DpB,wBAAQC,GAAR,CAAY,SAAZ,EAAuBmB,GAAvB;AACA,oBAAIA,IAAIC,UAAR,EAAoB;AAChB/B,2BAAOmF,WAAP,GAAqB,CAACrD,IAAIE,MAAJ,CAAWC,EAAZ,CAArB;AACAvB,4BAAQC,GAAR,CAAYmB,IAAIE,MAAJ,CAAWC,EAAvB;AACH;AACJ,aAND;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjC,mBAAOoF,YAAP,GAAsB,YAAM;AACxBX,yBAASY,QAAT,GAAoB1C,IAApB,CAAyB,UAACC,QAAD,EAAc;AACnC5C,2BAAOY,WAAP,CAAmBiC,IAAnB,GAA0BD,SAASC,IAAnC;AACH,iBAFD;AAGH,aAJD;AAKA7C,mBAAOoF,YAAP;AAEH;;AApCgB,KAArB;;AA6CA;AACA;AACA;AACA;;;AAGApF,WAAOsF,UAAP,GAAoB,UAACrD,EAAD,EAAQ;AACxBwC,iBAASa,UAAT,CAAoBrD,GAAG,CAAH,CAApB,EAA2BU,IAA3B,CAAgC,UAACC,QAAD,EAAc,CAAE,CAAhD;AACA5C,eAAOoF,YAAP;AACH,KAHD;AAQH,CAnGD;ACAA;;;ACAA9F,QAAQC,MAAR,CAAe,KAAf,EAAsBgG,OAAtB,CAA8B,SAA9B,EAAyC,UAAStF,KAAT,EAAgB;;AAErD,SAAKyC,WAAL,GAAmB,YAAM;AACjB,eAAOzC,MAAM;AACTJ,iBAAK,kBADI;AAET2F,oBAAQ;AAFC,SAAN,CAAP;AAIH,KALL,EAMI,KAAKjC,SAAL,GAAiB,UAACtB,EAAD,EAAQ;AACrB,eAAOhC,MAAM;AACTJ,qCAAuBoC,EADd;AAETuD,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAXL,EAYI,KAAK1B,aAAL,GAAqB,YAAM;AACvB,eAAO7D,MAAM;AACTJ,iBAAK,oBADI;AAET2F,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAjBL,EAkBI,KAAKxB,WAAL,GAAmB,UAAC/B,EAAD,EAAQ;AACvB,eAAOhC,MAAM;AACTJ,uCAAyBoC,EADhB;AAETuD,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAvBL,EAwBI,KAAKhD,aAAL,GAAqB,UAACJ,SAAD,EAAe;AAChC,eAAOnC,MAAM;AACTJ,qCADS;AAET2F,oBAAQ,KAFC;AAGT3C,kBAAMT;AAHG,SAAN,CAAP;AAKH,KA9BL,EA+BI,KAAKqD,WAAL,GAAmB,YAAM;AACrB,eAAOxF,MAAM;AACTJ,mCADS;AAET2F,oBAAQ;AACR;AAHS,SAAN,CAAP;AAKH,KArCL,EAsCI,KAAKvB,aAAL,GAAqB,UAAChC,EAAD,EAAQ;AACzB,eAAOhC,MAAM;AACTJ,yCAA2BoC,EADlB;AAETuD,oBAAQ;AAFC,SAAN,CAAP;AAIH,KA3CL,EA4CI,KAAKE,WAAL,GAAmB,UAACC,QAAD,EAAc;AAC7B,eAAO1F,MAAM;AACTJ,uCAAyB8F,QADhB;AAETH,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAjDL;AAkDH,CApDD;;;ACAAlG,QAAQC,MAAR,CAAe,KAAf,EAAsBgG,OAAtB,CAA8B,SAA9B,EAAyC,UAAStF,KAAT,EAAgB;AAAA;;AACrD,QAAI2F,aAAa,SAAbA,UAAa,GAAM;AACnB,eAAO3F,MAAM;AACTuF,oBAAQ,KADC;AAET3F,kEAAoDL,OAAOqG,cAA3D,kBAAsFrG,OAAOsG;AAFpF,SAAN,EAGJnD,IAHI,CAGC,UAACoD,GAAD,EAAS;AACb,kBAAKvB,OAAL,GAAeuB,IAAIlD,IAAnB;AACH,SALM,CAAP;AAMH,KAPD;AAQH,CATD;;;ACAAvD,QAAQC,MAAR,CAAe,KAAf,EAAsBgG,OAAtB,CAA8B,UAA9B,EAA0C,UAAStF,KAAT,EAAgB;;AAEtD,SAAKoF,QAAL,GAAgB,YAAM;AACd,eAAOpF,MAAM;AACTJ,iBAAK,eADI;AAET2F,oBAAQ;AAFC,SAAN,CAAP;AAIH,KALL,EAMI,KAAKF,UAAL,GAAkB,UAACrD,EAAD,EAAQ;AACtB,eAAOhC,MAAM;AACTJ,sCAAwBoC,EADf;AAETuD,oBAAQ;AAFC,SAAN,CAAP;AAIH,KAXL,EAYI,KAAKX,UAAL,GAAkB,UAACD,IAAD,EAAU;AACxB,eAAO3E,MAAM;AACTJ,iBAAK,cADI;AAET2F,oBAAQ,MAFC;AAGT3C,kBAAM+B;AAHG,SAAN,CAAP;AAKH,KAlBL,EAmBI,KAAKI,cAAL,GAAsB,UAACJ,IAAD,EAAU;AAC5B,eAAO3E,MAAM;AACTJ,iBAAK,qBADI;AAET2F,oBAAQ,KAFC;AAGT3C,kBAAM+B;AAHG,SAAN,CAAP;AAKH,KAzBL,EA0BI,KAAKM,cAAL,GAAsB,UAACN,IAAD,EAAU;AAC5B,eAAO3E,MAAM;AACTJ,iBAAK,qBADI;AAET2F,oBAAQ,KAFC;AAGT3C,kBAAM+B;AAHG,SAAN,CAAP;AAKH,KAhCL;AAkCH,CApCD","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router', 'ngTouch', 'ui.grid', 'ui.grid.cellNav', 'ui.grid.edit', 'ui.grid.resizeColumns', 'ui.grid.pinning', 'ui.grid.selection', 'ui.grid.moveColumns', 'ui.grid.exporter', 'ui.grid.importer', 'ui.grid.grouping', 'ui.grid.infiniteScroll', 'ui.grid.expandable'])\n    .config(function($stateProvider, $urlRouterProvider) {\n        $urlRouterProvider.when('', '/');\n\n        $stateProvider\n            .state('home', {\n                url: '/',\n                templateUrl: './views/home.html'\n            })\n            .state('users', {\n                url: '/users',\n                templateUrl: './views/users.html',\n                controller: 'usersCtrl'\n            })\n            .state('data', {\n                url: '/data',\n                templateUrl: './views/data.html',\n                controller: 'dataCtrl'\n            })\n            .state('location', {\n                url: '/location',\n                templateUrl: './views/location.html'\n            })\n            .state('register', {\n                url: '/register',\n                templateUrl: './views/register.html',\n                controller: 'usersCtrl'\n            })\n            .state('login', {\n                url: '/login',\n                templateUrl: './views/login.html'\n            })\n            .state('change-password', {\n                url: '/change-password',\n                templateUrl: './views/changePassword.html',\n                controller: 'usersCtrl'\n            })\n            .state('change-username', {\n                url: '/change-username',\n                templateUrl: './views/changeUsername.html',\n                controller: 'usersCtrl'\n            })\n    })","","angular.module('app').controller('dataCtrl', function($scope, $http, $timeout, $interval, uiGridConstants, uiGridGroupingConstants, dataSrv, $window) {\n\n    var gridApi;\n\n    $scope.selectedArray = []\n        // $scope.selectedSubArray = []\n    console.log($scope.selectedArray)\n\n    // window.onclick = (event) => {\n    //     var test = document.getElementsByClassName('ui-grid-row')\n    //     console.log(test)\n    // }\n\n\n    $scope.gridOptions = {\n        enableCellEditOnFocus: true,\n        enableColumnResizing: true,\n        enableFiltering: true,\n        enableGridMenu: true,\n        infiniteScrollRowsFromEnd: 25,\n        infiniteScrollUp: true,\n        infiniteScrollDown: true,\n        enableRowSelection: true,\n        multiSelect: false,\n        expandableRowTemplate: './views/expandableRow.html',\n        expandableRowHeight: 150,\n        expandableRowScope: {\n            subGridVariable: 'subGridScopeVariable'\n        },\n        onRegisterApi: function(gridApi) {\n            // console.log($scope.subGridVariable)\n            gridApi = gridApi;\n\n            gridApi.selection.on.rowSelectionChanged($scope, function(row) {\n                // console.log(\"outter: \", row)\n                if (row.isSelected) {\n                    $scope.selectedArray = [row.entity.id]\n                }\n            })\n\n            gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {\n                console.log(rowEntity, 'row')\n                console.log(colDef, 'your')\n                console.log(newValue, 'boat')\n                console.log(oldValue, 'ok')\n                dataSrv.changePatient(rowEntity);\n            })\n\n            $scope.receivePatients = () => {\n                dataSrv.getPatients().then((response) => {\n                    $scope.gridOptions.data = response.data;\n                    for (var i = 0; i < response.data.length; i++) {\n                        $scope.receiveVisits(response.data[i].id, i)\n                    }\n                })\n            }\n            $scope.receivePatients();\n            $scope.test = () => {\n                alert('ehy')\n                console.log(document.getElementsByClassName(\"'ui-grid-row-selected': row.isSelected\"))\n            }\n\n            $scope.subGridScope = {\n                clickMeSub: function() {\n                    // console.log($event.target.parentElement.parentElement)\n                    console.log(this)\n                        // alert('hi', $event);\n                }\n            };\n\n            $scope.receiveVisits = (id, i) => {\n                dataSrv.getVisits(id).then((response) => {\n                    // response.data.map(e => {\n                    //     e['delete?'] = 'x'\n                    // })\n\n                    $scope.gridOptions.data[i].subGridOptions = {\n                        appScopeProvider: $scope.subGridScope,\n                        columnDefs: [\n                            { name: 'id', cellTemplate: `<button class=\"btn primary\" ng-click=\"grid.appScope.clickMeSub()\">Click Me</button>` },\n\n                            { name: 'visit_id' },\n                            { name: 'date' },\n                            { name: 'area_hurt' },\n                            { name: 'reason' },\n                            { name: 'prescription' },\n                            { name: 'followup' },\n                            { name: 'notes' }\n                        ],\n                        data: response.data\n                    };\n                })\n            };\n\n            // gridApi.expandable.on.rowExpandedStateChanged($scope, function(row) {\n            //         if (row.isExpanded) {\n            //             row.entity.subGridOptions = {\n            //                 columnDefs: [\n            //                     { name: 'Visit_id' },\n            //                     { name: 'Date' },\n            //                     { name: 'Area_hurt' },\n            //                     { name: 'Reason' },\n            //                     { name: 'Prescription' },\n            //                     { name: 'Followup' },\n            //                     { name: 'Notes' }\n            //                 ]\n            //             }\n\n            //             let data = []\n            //             for (let i = 0; i < $scope.gridOptions.data; i++) {\n            //                 data.push($scope.gridOptions.data[i].subGridOptions.data)\n            //             }\n            //             console.log(data)\n            //             row.entity.subGridOptions.data = data;\n            //             console.log(row.entity.subGridOptions, 'subgrid')\n            //         }\n            //     })\n            // gridApi.expandable.on.rowExpandedStateChanged($scope, function(row) {\n            //     console.log(document.getElementsByClassName(\"'ui-grid-row-selected': row.isSelected\"))\n            //     console.log(row.isSelected)\n            //     console.log(row.entity.subGridOptions)\n            // })\n\n        }\n\n    };\n\n\n\n\n\n    // $scope.receivePatients = () => {\n    //     dataSrv.getPatients().then((response) => {\n    //         $scope.gridOptions.data = response.data;\n    //         for (var i = 0; i < response.data.length; i++) {\n    //             $scope.receiveVisits(response.data[i].id, i)\n    //         }\n    //     })\n    // }\n    // $scope.receivePatients();\n\n    // $scope.receiveVisits = (id, i) => {\n    //     dataSrv.getVisits(id).then((response) => {\n    //         // response.data.map(e => {\n    //         //     e['delete?'] = 'x'\n    //         // })\n    //         $scope.gridOptions.data[i].subGridOptions = {\n    //             data: response.data\n    //         };\n    //     })\n    // };\n\n    // const deleteCell = document.getElementsByClassName('ui-grid-coluiGrid-0093');\n    // const deleteVisitFn = () => {\n    //     alert('This works')\n    // }\n    // console.log(deleteCell)\n    // deleteCell.map(e => {\n    //     e.addEventListener('click', deleteVisitFn)\n    // })\n\n    $scope.addPatient = () => {\n        dataSrv.addNewPatient().then((response) => {})\n        $scope.receivePatients();\n    };\n\n    $scope.addVisit = (id) => {\n        dataSrv.addNewVisit(id[0]).then((response) => {})\n        $scope.receivePatients();\n    };\n\n\n    $scope.removePatient = (id) => {\n        dataSrv.removePatient(id[0]).then((response) => {})\n        $scope.receivePatients();\n    };\n\n\n\n\n    $scope.toggleFilterRow = function() {\n        $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;\n        gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);\n    };\n\n\n\n});","angular.module('app').controller('mainCtrl', function($scope, mainSrv) {\n    $scope.weather = mainSrv.weather\n})","angular.module('app').controller('usersCtrl', function($scope, $http, $timeout, $interval, uiGridConstants, uiGridGroupingConstants, usersSrv, $state) {\n\n\n    $scope.addUser = (user) => {\n        usersSrv.addNewUser(user).then((response) => {\n            if (response.data = []) {\n                $state.go('home')\n            } else {\n                alert('Try again.')\n            }\n        })\n\n    }\n\n    $scope.changePassword = (user) => {\n        usersSrv.updatePassword(user).then((response) => {\n            if (response.data = []) {\n                $state.go('home')\n            } else {\n                alert('Try again.')\n            }\n        })\n    }\n\n    $scope.changeUsername = (user) => {\n        usersSrv.updateUsername(user).then((response) => {\n            if (response.data = []) {\n                $state.go('home')\n            } else {\n                alert('Try again.')\n            }\n        })\n    }\n\n\n    var gridApi;\n\n    $scope.selectArray = []\n    console.log('array: ', $scope.selectArray)\n\n    $scope.gridOptions = {\n        enableCellEditOnFocus: true,\n        enableColumnResizing: true,\n        enableFiltering: true,\n        enableGridMenu: true,\n        infiniteScrollRowsFromEnd: 25,\n        infiniteScrollUp: true,\n        infiniteScrollDown: true,\n        enableRowSelection: true,\n        multiSelect: false,\n        onRegisterApi: function(gridApi) {\n            gridApi = gridApi;\n\n            gridApi.selection.on.rowSelectionChanged($scope, function(row) {\n                console.log(\"chart: \", row)\n                if (row.isSelected) {\n                    $scope.selectArray = [row.entity.id]\n                    console.log(row.entity.id)\n                }\n            })\n\n            // gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {\n            //     console.log(rowEntity, 'you')\n            //     console.log(colDef, 'better')\n            //     console.log(newValue, 'work')\n            //     console.log(oldValue, 'man')\n            //     usersSrv.changePatient(rowEntity);\n            // })\n\n            $scope.receiveUsers = () => {\n                usersSrv.getUsers().then((response) => {\n                    $scope.gridOptions.data = response.data;\n                })\n            }\n            $scope.receiveUsers();\n\n        }\n\n    };\n\n\n\n\n\n\n    // $scope.addPatient = () => {\n    //     dataSrv.addNewPatient().then((response) => {})\n    //     $scope.receivePatients();\n    // };\n\n\n    $scope.removeUser = (id) => {\n        usersSrv.removeUser(id[0]).then((response) => {})\n        $scope.receiveUsers();\n    };\n\n\n\n\n});","","angular.module('app').service('dataSrv', function($http) {\n\n    this.getPatients = () => {\n            return $http({\n                url: '/api/getPatients',\n                method: 'GET'\n            })\n        },\n        this.getVisits = (id) => {\n            return $http({\n                url: `/api/getVisits/${id}`,\n                method: 'GET'\n            })\n        },\n        this.addNewPatient = () => {\n            return $http({\n                url: '/api/addNewPatient',\n                method: 'POST'\n            })\n        },\n        this.addNewVisit = (id) => {\n            return $http({\n                url: `/api/addNewVisit/${id}`,\n                method: 'POST'\n            })\n        },\n        this.changePatient = (rowEntity) => {\n            return $http({\n                url: `/api/updatePatient`,\n                method: 'PUT',\n                data: rowEntity\n            })\n        },\n        this.changeVisit = () => {\n            return $http({\n                url: `/api/updateVisit`,\n                method: 'PUT',\n                // data: \n            })\n        },\n        this.removePatient = (id) => {\n            return $http({\n                url: `/api/deletePatient/${id}`,\n                method: 'DELETE'\n            })\n        },\n        this.removeVisit = (visit_id) => {\n            return $http({\n                url: `/api/deleteVisit/${visit_id}`,\n                method: 'DELETE'\n            })\n        }\n})","angular.module('app').service('mainSrv', function($http) {\n    let getWeather = () => {\n        return $http({\n            method: 'get',\n            url: `api.openweathermap.org/data/2.5/weather?zip=${config.weatherZipCode},us&APPID=${config.weatherAPI}`\n        }).then((res) => {\n            this.weather = res.data;\n        })\n    };\n})","angular.module('app').service('usersSrv', function($http) {\n\n    this.getUsers = () => {\n            return $http({\n                url: '/api/getUsers',\n                method: 'GET'\n            })\n        },\n        this.removeUser = (id) => {\n            return $http({\n                url: `/api/deleteUser/${id}`,\n                method: 'DELETE'\n            })\n        },\n        this.addNewUser = (user) => {\n            return $http({\n                url: '/api/addUser',\n                method: 'POST',\n                data: user\n            })\n        },\n        this.updatePassword = (user) => {\n            return $http({\n                url: '/api/updatePassword',\n                method: 'PUT',\n                data: user\n            })\n        },\n        this.updateUsername = (user) => {\n            return $http({\n                url: '/api/updateUsername',\n                method: 'PUT',\n                data: user\n            })\n        }\n\n})"]}